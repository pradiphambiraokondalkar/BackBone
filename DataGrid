const LEFT_PAGE = 'LEFT';
const RIGHT_PAGE = 'RIGHT';

const range = (from, to, step = 1) => {
    let i = from;
    const range = [];

    while (i <= to) {
        range.push(i);
        i += step;
    }

    return range;
}

class App extends React.Component {
    constructor() {
        super();
        this.state = {
            data: [],
            ViewData: [],
            columnNames: [],
            ViewcolumnNames: [],
            gridURL: GridURL,
            editURL: EditURL,
            newLinkURL: NewLinkURL,
            addURL: AddURL,
            deleteURL: DeleteURL,
            gridHead: GridHead,
            searchURL: SearchURL,
            query: '',
            currentPage: 1,
            listsPerPage: 10,
            sortby: '',
            counter: 1,
            widthstr: '20px',
            totalPage: [],
            totalRecords: null,
            pageNeighbours: 1,
            allviewdata: 0,
            dividedviewdata: 0,
            firstnames: [],
            firstdata: [],
            secondnames: [],
            seconddata: [],
            noData: 0
        };
        this.EditFunct = this.EditFunct.bind(this);
        this.ViewFunct = this.ViewFunct.bind(this);
        this.DeleteFunct = this.DeleteFunct.bind(this);
        this.handleInputChange = this.handleInputChange.bind(this);
        this.handleClick = this.handleClick.bind(this);
        this.sortClick = this.sortClick.bind(this);
        this.handleSizeChange = this.handleSizeChange.bind(this);
        this.NewLinkFunct = this.NewLinkFunct.bind(this);
        this.PriorityUPFunct = this.PriorityUPFunct.bind(this);
        this.PriorityDownFunct = this.PriorityDownFunct.bind(this);
        this.NewLinkFunct1 = this.NewLinkFunct1.bind(this);
        this.NewLinkFunct2 = this.NewLinkFunct2.bind(this);
    }

    componentDidMount() {
        this.getdetails();
        $(document).ready(function () {

            //$('.dataTables_filter').css('display', 'none');
           

        })
    }
    handelBack(e) {
        var url = $(".btnBack").data("url");

        document.location = url;
    }
    handleClick = page => evt => {
        evt.preventDefault();

        this.gotoPage(page);
    }

    handleMoveLeft = evt => {
        evt.preventDefault();
        this.gotoPage(this.state.currentPage - this.pageNeighbours * 2 - 1);
    }

    handleMoveRight = evt => {
        evt.preventDefault();
        this.gotoPage(this.state.currentPage + (this.pageNeighbours * 2) + 1);
    }

    NewLinkFunct(e) {

        e.preventDefault();
        // var id = e.target.id;

        const rid = e.target.dataset.rid;

        url = this.state.newLinkURL + "/" + rid;

        //if (id === null) {
        //    url = this.state.newLinkURL + "/" + rid;
        //}
        //else {

        //    url = this.state.newLinkURL + "/?ID=" + rid + "&IId=" + id;

        //}
        document.location = url;

    }

    getdetails() {
        fetch(this.state.gridURL, {
            credentials: 'include'
        })

            .then(res => res.json(),$("#loader").show())
            .then(
                (data) => {
                    this.setState({
                        isLoaded: true,
                        data: data,
                        columnNames: Object.keys(data[0])
                        
                    });
                    this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 5;
                    this.totalRecords = this.state.data.length;

                    this.pageNeighbours = typeof pageNeighbours === 'number'
                        ? Math.max(1, Math.min(pageNeighbours, 1))
                        : 0;
                    var totalPages = Math.ceil(this.state.data.length / this.state.listsPerPage);

            $(".MainTable").DataTable({
                        "pageLength": 10,
                   "order": [],
                   "bDestroy": true,
                   retrieve: true,
                seaching: true,
                columnDefs: [
                    { orderable: false}
                ]
                        
                    });

                    $('#DataTables_Table_0_wrapper').find('.dataTables_filter,#DataTables_Table_0_length,#DataTables_Table_0_info,#DataTables_Table_0_paginate').hide();

                   //$('#DataTables_Table_0_wrapper').find('lable').addClass('form-control');
                   
                  

                    this.setState({
                        currentPage: 1,
                        totalPage: totalPages
                    });
                   
            },
                (error) => {
                    this.setState({
                        isLoaded: true,
                        error
                    });
                    $("#loader").hide();
                    swal({ title: "Data Not Available !", text: " ", icon: 'image/data-not-found.jpg' });
            },
                 $("#loader").hide()
            );

    }

    gotoPage = page => {

        const { onPageChanged = f => f } = this.props;

        const currentPage = Math.max(0, Math.min(page, this.state.data.length));

        const paginationData = {
            currentPage,
            totalPages: this.state.totalPages,

            totalRecords: this.state.totalRecords
        };

        this.setState({ currentPage }, () => onPageChanged(paginationData));
    }



    fetchPageNumbers() {

        const totalPages = Math.ceil(this.state.data.length / this.state.listsPerPage);
        const currentPage = this.state.currentPage;
        // to change the numbers on pagination
        const pageNeighbours = 2;
        const totalNumbers = (this.pageNeighbours * 2) + 3;
        const totalBlocks = totalNumbers + 2;
        if (totalPages > totalBlocks) {

            const startPage = Math.max(2, currentPage - pageNeighbours);
            const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);

            let pages = range(startPage, endPage);

            /**
             * hasLeftSpill: has hidden pages to the left
             * hasRightSpill: has hidden pages to the right
             * spillOffset: number of hidden pages either to the left or to the right
             */
            const hasLeftSpill = startPage > 2;
            const hasRightSpill = (totalPages - endPage) > 1;
            const spillOffset = totalNumbers - (pages.length + 1);

            switch (true) {
                // handle: (1) < {5 6} [7] {8 9} (10)
                case (hasLeftSpill && !hasRightSpill): {
                    const extraPages = range(startPage - spillOffset, startPage - 1);
                    pages = [LEFT_PAGE, ...extraPages, ...pages];
                    break;
                }

                // handle: (1) {2 3} [4] {5 6} > (10)
                case (!hasLeftSpill && hasRightSpill): {
                    const extraPages = range(endPage + 1, endPage + spillOffset);
                    pages = [...pages, ...extraPages, RIGHT_PAGE];
                    break;
                }


                // handle: (1) < {4 5} [6] {7 8} > (10)
                case (hasLeftSpill && hasRightSpill):
                default: {
                    pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];
                    break;
                }
            }

            return [1, ...pages, totalPages];

        }
        return range(1, totalPages);

    }

    DeleteFunct(e) {
        const rid = e.target.dataset.rid;
        swal({
            title: "Are you sure?",
            text: "Are you sure that you want to delete this record?",
            icon: "warning",
            showCancelButton: true,
            closeOnConfirm: false,
            confirmButtonClass: "btn-danger",
            confirmButtonText: "Yes, Delete it!",
            dangerMode: true,
            buttons: {
                confirm: {
                    text: "OK",
                    value: true,
                    visible: true,
                    className: "",
                    closeModal: true
                },cancel: {
                    text: "Cancel",
                    value: null,
                    visible: true,
                    className: "",
                    closeModal: true,
                }
                
            }
        })
            .then(function (isconfirm) {
               
                if (isconfirm === true) {
                   
                    setTimeout(function () {
                        $.post(DeleteURL, {
                            ID: rid
                        },
                            function (data) {
                                if (data.Status === true) {
                                    swal({ title: "Success!", text: "Record Deleted Successfuly", icon: "success", buttons: false });

                                    setTimeout("window.location.reload(true);", 2000);
                                }
                                else if (data.Status === false) {
                                    swal({ title: "Opps!", text: data.Message, icon: "error", buttons: false });
                                    
                                    setTimeout("window.location.reload(true);", 2000);

                                }
                            }
                        );

                    }, 50);
                }
               
            });
        

      
    }

    EditFunct(e) {

        const rid = e.target.dataset.rid;
        var url = "";
        const IId = e.target.dataset.iid;

        e.preventDefault();


        if (IId === null) {
            url = this.state.editURL + "/" + rid;
        }
        else {

            url = this.state.editURL + "/?ID=" + rid + "&IId=" + IId;

        }
        document.location = url;
    }


    ViewFunct(e) {
        const rid = e.target.dataset.rid;
        //    var d = {
        //        id: rid
        //    }
        //fetch(ViewURL, {
        //    credentials: 'include',
        //    method: "POST",
        //    data: d,
        //    body: JSON.stringify(data),

        //    headers: {
        //        "Content-Type": "application/json"
        //    }
        //})
        //    .then(res => res.json())
        //    .then(
        //        (data) => {
        //            alert(data)
        //        });
        //}
      

        $.ajax({
            url: ViewURL,
            data: { ID: rid },
            type: "GET",
            dataType: "json",
            success: function (Data) {
                if (Data.length !== 0) {
                this.setState({
                    ViewData: Data,
                    
                    ViewcolumnNames: Object.keys(Data[0])
                    });
                    var x = this.state.ViewcolumnNames;
                    var sp = x.length / 2;


                    var citrus = Object.keys(this.state.ViewData[0]);
                    var citrus2 = Object.values(this.state.ViewData[0]);

                    this.setState({
                        firstnames: citrus.slice(0, Math.ceil(sp)),
                        firstdata: citrus2.slice(0, Math.ceil(sp)),
                        secondnames: citrus.slice(Math.ceil(sp), x.length),
                        seconddata: citrus2.slice(Math.ceil(sp), x.length)
                    });
                    this.setState({
                        noData: 1

                    })
                }
                if (Data.length === 0) {
                    this.setState({
                        noData: 0

                    })

                }
            }.bind(this),
            error: function (e) {
                swal({ title: "Opps!", text: e.statusText, icon: "error" }).then(function () {
                    
                });
                //swal({ title: "Opps!", text: "Error", icon: "error", buttons: false });
                //setTimeout("window.location.reload(true);", 2000);

            }

        });

    }

    //PriorityUp Function  

    PriorityUPFunct(e) {
        const rid = e.target.dataset.rid;

        $.ajax({

            url: PriorityUPURL,
            data: { CID: rid },
            cache: false,
            type: "POST",
            async: false,
            success: function (data) {

               
                if (data.Status === true) {
                    swal({ title: "Success", text: data.Message, icon: "success", buttons: false });

                    setTimeout("window.location.reload(true);", 1000);
                }
                else if (data.Status === false) {
                    swal({ title: "Opps!", text: data.Message, type: "error", buttons: false });

                    setTimeout("window.location.reload(true);", 1000);

                }


            },
            error: function (e) {
                swal({ title: "Opps!", text: e.statusText, icon: "error" }).then(function () {
                    
                });
                //swal({ title: "Opps!", text: "Error ", type: "error", buttons: false });
                //setTimeout("window.location.reload(true);", 3000);
            }
        });


    }

    //PriorityDown Function
    PriorityDownFunct(e) {
        const rid = e.target.dataset.rid;

        $.ajax({

            url: PriorityDownURL,
            data: { CID: rid },
            cache: false,
            type: "POST",
            async: false,
            success: function (data) {

                if (data.Status === true) {
                    swal({ title: "Success", text: data.Message, icon: "success", buttons: false });

                    setTimeout("window.location.reload(true);", 1000);
                }
                else if (data.Status === false) {
                    swal({ title: "Opps!", text: data.Message, icon: "error", buttons: false });

                    setTimeout("window.location.reload(true);", 1000);

                }


            },
            error: function (e) {
                swal({ title: "Opps!", text: e.statusText, icon: "error" }).then(function () {

                });
                //swal({ title: "Opps!", text: "Error ", type: "error", buttons: false });
                //setTimeout("window.location.reload(true);", 3000);
            }
        });


    }

    //Link1 redirect to next page
    NewLinkFunct1(e) {

        e.preventDefault();

        const rid = e.target.dataset.rid;

        const LinkURL = this.state.newLinkURL;

        let LinkURL1 = [];
        LinkURL1 = LinkURL.split("#");

        url = LinkURL1[0] + "/" + rid;

        document.location = url;

    }

    //Link2 redirect to next page
    NewLinkFunct2(e) {

        e.preventDefault();

        const rid = e.target.dataset.rid;
        const LinkURL = this.state.newLinkURL;

        let LinkURL2 = [];
        LinkURL2 = LinkURL.split("#");

        url = LinkURL2[1] + "/" + rid;
        document.location = url;

    }

    //change pagination

    handleClick(event) {
        this.setState({
            currentPage: Number(event.target.id),


        });

    }

    //change number of records on page

    //handleSizeChange() {
    //    this.setState({
    //        listsPerPage: this.size.value,

    //    });
    //    this.handleClick();

    //}

    handleSizeChange() {

        if (this.size.value > this.state.data.length || this.size.value < this.state.data.length) {
            this.setState({
                currentPage: 1
            });
        }

        this.setState({
            listsPerPage: this.size.value
        });

    }

    //sorting currently making static data item

    sortClick(e) {

        const columnname = e.target.dataset.columnname /*e.target.dataset.columnname*/;
        const orderby = e.target.dataset.orderby;

        var d = {
            sortColumnName: columnname,
            sortOrder: orderby
        };

        $.ajax({
            url: "/Employee/GetEmpData",
            data: d,
            type: "POST",
            success: function (data) {
                this.setState({
                    data: data

                });

            }.bind(this),
            error: function (xhr) {
                swal({ title: "Opps!", text: "No records found ", icon: "error", buttons: false });
                setTimeout("window.location.reload(true);", 2000);

            }

        });

        //this.getSortedResults();
    }

    //Searching 



    handleInputChange(e) {
        debugger
        var Svalue = $.trim(e.target.value);


        if (Svalue.length > 0) {

            var d = {
                search_Name: Svalue,
                search_num: Svalue
            };

            $.ajax({
                url: this.state.searchURL,
                data: d,
                type: "POST",
                success: function (data) {
                    if (data.length === 0) {
                        this.setState({
                            data: data

                        });
                    }
                    else {
                        this.setState({
                            data: data

                        });
                    }
                }.bind(this),
                error: function (xhr) {
                    swal({ title: "Opps!", text: "No records found ", icon: "error", buttons: false });
                    setTimeout("window.location.reload(true);", 2000);

                }

            });
        }
        else {
            this.getdetails();
        }
    }

    render() {

        //css

        const row = {
            marginBottom: '19px',
            marginTop: '16px',
            marginLeft: '0px'
        };
        const header = {
            textAlign: 'center !important',
            marginTop: '-56px',
            marginBottom: '44px',
            backgroundColor: '#428bca'
        };
        const thead =
        {
            backgroundColor: '#22a9d8 !important'
        };

        const list = {
            display: "inline !important",
            listStyle: "none"
        };

        const Pagination = {
            float: 'right'
        };

        const count = {
            //float: 'left !important',
            //listStyle: 'none',
            //color: '#337ab7',
            //fontWeight: 'bold'
        };

        const paginationRow = {
            //marginTop: '-25px !important'
        };

        const { currentPage } = this.state;
        const pages = this.fetchPageNumbers();

        const { data, listsPerPage } = this.state;

        const indexOfLastTodo = currentPage * listsPerPage;
        const indexOfFirstTodo = indexOfLastTodo - listsPerPage;

        const currentTodos = data.slice(indexOfFirstTodo, indexOfLastTodo);

        const hidden = {
            display: 'none'
        };

        let totalRecords = data.length;

        let TableData = "";

        let FirstNames = this.state.firstnames.map((p, index) => {
            return (
                <div className="view-popup-heading">
                    <div className="form-group" >{p.replace("_", " ")} <span className="model-popup-spacing"> : </span></div>
                </div>
            );
        });

        let FirstData = this.state.firstdata.map((p) => {
            if (p === "" || p === null) {
                return (
                    <div className="view-popup-content">
                        <div className="form-group" >&nbsp;</div>
                    </div>
                );
            }
            else {
                return (
                    <div className="view-popup-content">
                        <div className="form-group" >{p}</div>
                    </div>
                );
            }
           
        });

        let SecondNames = this.state.secondnames.map((p, index) => {
            return (
                <div className="view-popup-heading">
                    <div className="form-group" >{p.replace("_", " ")}<span className="model-popup-spacing"> : </span></div>
                </div>
            );
        });

        let SecondData = this.state.seconddata.map((p) => {
            if (p === "" || p === null) {
                return (
                    <div className="view-popup-content view-popup-content-last">
                        <div className="form-group" >&nbsp;</div>
                    </div>
                );
            }
            else {
                return (
                    <div className="view-popup-content view-popup-content-last">
                        <div className="form-group" >{p}</div>
                    </div>
                );
            }

            //return (
            //    <div className="">
            //        <div className="table-striped form-group" >{p}</div>
            //    </div>
            //);
        });
      
        switch (colCase) {
            case 'ReadOnly':
                TableData = currentTodos.map((p, index) => {

                    return (
                        <tr>
                            {
                                Object.keys(p).map(k => {
                                    if (k !== "RID" && k !== "privilege_view" && k !== "privilege_edit" && k !== "privilege_delete" && k !== "privilege_insert") {
                                        return (<td className="grey1" key={k}><div value={k}>{p[k]}</div></td>);
                                    }
                                })}
                        </tr>
                    );
                });
                break;
            case 'NotReadOnly':
                TableData = currentTodos.map((p, index) => {
                    return (
                        <tr>
                            {
                                Object.keys(p).map(k => {
                                    if (k !== "RID" && k !== "privilege_view" && k !== "privilege_edit" && k !== "privilege_delete" && k !== "privilege_insert") {
                                        return (<td className="grey1" key={k}><div value={k}>{p[k]}</div></td>);
                                    }
                                })}
                            {
                                PriorityCol === true ?
                                    <div>
                                        <td>
                                            <ul className="bootstrap-dashboard-action list-inline" >
                                                <li><a className="fa fa-angle-double-up" title="Priority Up" data-rid={p.RID} id="PriorityUpButton" onClick={this.PriorityUPFunct}></a></li>
                                                <li><a className="fa fa-angle-double-down" title="Priority Down" data-rid={p.RID} id="PriorityDownButton" onClick={this.PriorityDownFunct}></a></li>
                                            </ul>
                                        </td>
                                    </div>
                                    : null
                            }

                            {
                                p.privilege_view === true ?
                                    <td className="action-width">
                                            <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-eye dashboardtable-view-button" title="View" data-toggle="modal" data-target="#myModal" data-rid={p.RID} id="ViewButton" onClick={this.ViewFunct}></a></li>
                                            </ul>
                                        </td>
                                    : null
                            }
                            {
                                p.privilege_edit === true ?
                                    <td className="action-width">
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-pencil dashboardtable-edit-button" title="Edit" data-iid={p.IID} data-rid={p.RID} id="EditButton" onClick={this.EditFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }
                            {
                                p.privilege_delete === true ?
                                    <td className="action-width">
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-trash dashboardtable-delete-button" title="Delete" data-rid={p.RID} id="DeleteButton" onClick={this.DeleteFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }


                           

                        </tr>

                    );
                });
                break;
            case 'NotReadOnlyWithNewLink':
                TableData = currentTodos.map((p, index) => {
                    return (
                        <tr>
                            {
                                Object.keys(p).map(k => {
                                    if (k !== "RID" && k !== "privilege_view" && k !== "privilege_edit" && k !== "privilege_delete" && k !== "privilege_insert") {
                                        return (<td className="grey1" key={k}>
                                            <div value={k}>{p[k]}</div>
                                        </td>);
                                    }


                                })}


                            {
                                PriorityCol === true ?
                                    <div>
                                        <td>
                                            <ul className="bootstrap-dashboard-action list-inline" >
                                                <li><a className="fa fa-angle-double-up" title="Priority Up" data-rid={p.RID} id="PriorityUpButton" onClick={this.PriorityUPFunct}></a></li>
                                                <li><a className="fa fa-angle-double-down" title="Priority Down" data-rid={p.RID} id="PriorityDownButton" onClick={this.PriorityDownFunct}></a></li>
                                            </ul>
                                        </td>
                                    </div>

                                    : null

                            }

                            {
                                p.privilege_view === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-eye dashboardtable-view-button" title="View" data-toggle="modal" data-target="#myModal" data-rid={p.RID} id="ViewButton" onClick={this.ViewFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }
                            {
                                p.privilege_edit === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-pencil dashboardtable-edit-button" title="Edit" data-iid={p.IID} data-rid={p.RID} id="EditButton" onClick={this.EditFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }
                            {
                                p.privilege_delete === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-trash dashboardtable-delete-button" title="Delete" data-rid={p.RID} id="DeleteButton" onClick={this.DeleteFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }

                            <td >
                                <ul className="bootstrap-dashboard-action list-inline" >
                                    <li>
                                        <a
                                            className='btn-link btnEdit btn' data-rid={p.RID} id={p.Interface_Name} onClick={this.NewLinkFunct}>{LinkName}
                                        </a>
                                    </li>
                                </ul>
                            </td>

                        </tr>

                    );

                });
                break;
            case 'NotReadOnlyWithPrivilegeNewLink':
                TableData = currentTodos.map((p, index) => {
                    return (
                        <tr>
                            {
                                Object.keys(p).map(k => {
                                    if (k !== "RID" && k !== "privilege_view" && k !== "privilege_edit" && k !== "privilege_delete" && k !== "privilege_insert" && k !== "privilege_authorise") {
                                        return (<td className="grey1" key={k}>
                                            <div value={k}>{p[k]}</div>
                                        </td>);
                                    }


                                })}


                            {
                                PriorityCol === true ?
                                    <div>
                                        <td>
                                            <ul className="bootstrap-dashboard-action list-inline" >
                                                <li><a className="fa fa-angle-double-up" title="Priority Up" data-rid={p.RID} id="PriorityUpButton" onClick={this.PriorityUPFunct}></a></li>
                                                <li><a className="fa fa-angle-double-down" title="Priority Down" data-rid={p.RID} id="PriorityDownButton" onClick={this.PriorityDownFunct}></a></li>
                                            </ul>
                                        </td>
                                    </div>

                                    : null

                            }

                            {
                                p.privilege_view === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-eye dashboardtable-view-button" title="View" data-toggle="modal" data-target="#myModal" data-rid={p.RID} id="ViewButton" onClick={this.ViewFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }
                            {
                                p.privilege_edit === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-pencil dashboardtable-edit-button" title="Edit" data-iid={p.IID} data-rid={p.RID} id="EditButton" onClick={this.EditFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }
                            {
                                p.privilege_delete === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-trash dashboardtable-delete-button" title="Delete" data-rid={p.RID} id="DeleteButton" onClick={this.DeleteFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }
                            {
                                p.privilege_authorise === true ?
                            <td >
                                <ul className="bootstrap-dashboard-action list-inline" >
                                    <li>
                                        <a
                                            className='btn-link btnEdit btn' data-rid={p.RID} id={p.Interface_Name} onClick={this.NewLinkFunct}>{LinkName}
                                        </a>
                                    </li>
                                </ul>
                            </td>
                                    : null
                            }
                        </tr>

                    );

                });
                
                break;
            case 'NotReadOnlyWithotDelete':
                TableData = currentTodos.map((p, index) => {

                    return (

                        <tr>
                            {
                                Object.keys(p).map(k => {
                                    if (k !== "RID" && k !== "RIP" && k !== "privilege_view" && k !== "privilege_edit" && k !== "privilege_delete" && k !== "privilege_insert" && k !== "IID") {
                                        return (<td className="grey1" key={k}>
                                            <div value={k}>{p[k]}</div>
                                        </td>);
                                    }
                                })}
                            <td>
                                {
                                    PriorityCol === true ?
                                        <div>
                                            <ul className="bootstrap-dashboard-action list-inline" >
                                                <li><a className="fa fa-angle-double-up" title="Priority Up" data-rid={p.RID} id="PriorityUpButton" onClick={this.PriorityUPFunct}></a></li>
                                                <li><a className="fa fa-angle-double-down" title="Priority Down" data-rid={p.RID} id="PriorityDownButton" onClick={this.PriorityDownFunct}></a></li>
                                            </ul>
                                        </div>

                                        : null
                                }
                            </td>

                            {
                                p.privilege_view === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-eye dashboardtable-view-button" title="View" data-toggle="modal" data-target="#myModal" data-rid={p.RIP} id="ViewButton" onClick={this.ViewFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }
                            {
                                p.privilege_edit === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-pencil dashboardtable-edit-button" title="Edit" data-iid={p.IID} data-rid={p.RID} id="EditButton" onClick={this.EditFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }
                        </tr>
                    );
                });
                break;
            case 'NotReadOnlyWithoutEdit':
                TableData = currentTodos.map((p, index) => {

                    return (

                        <tr>
                            {
                                Object.keys(p).map(k => {
                                    if (k !== "RID" && k !== "privilege_view" && k !== "privilege_edit" && k !== "privilege_delete" && k !== "privilege_insert") {
                                        return (<td className="grey1" key={k}>
                                            <div value={k}>{p[k]}</div>
                                        </td>);
                                    }


                                })}
                            {
                                p.privilege_view === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-eye dashboardtable-view-button" title="View" data-toggle="modal" data-target="#myModal" data-rid={p.RID} id="ViewButton" onClick={this.ViewFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }
                            {
                                p.privilege_delete === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-trash dashboardtable-delete-button" title="Delete" data-rid={p.RID} id="DeleteButton" onClick={this.DeleteFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }
                        </tr>

                    );

                });
                break;
            case 'ReadViewOnly':
                TableData = currentTodos.map((p, index) => {

                    return (

                        <tr>
                            {
                                Object.keys(p).map(k => {
                                    if (k !== "RID" && k !== "privilege_view" && k !== "privilege_edit" && k !== "privilege_delete" && k !== "privilege_insert") {
                                        return (<td className="grey1" key={k}>
                                            <div value={k}>{p[k]}</div>
                                        </td>);
                                    }


                                })}
                            {
                                p.privilege_view === true ?
                                    <td className="interface-privilege-icons">
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-eye dashboardtable-view-button" title="View" data-toggle="modal" data-target="#myModal" data-rid={p.RID} id="ViewButton" onClick={this.ViewFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }
                        </tr>
                    );
                });
                break;

            case 'ActionLinkWithCondition':
                TableData = currentTodos.map((p, index) => {

                    return (

                        <tr >
                            {
                                Object.keys(p).map(k => {
                                    if (k !== "RID" && k !== "privilege_view" && k !== "privilege_edit" && k !== "privilege_delete" && k !== "privilege_insert") {
                                        return (<td className="grey1" key={k}><div value={k}>{p[k]}</div></td>);
                                    }
                                })}

                            {
                                (p.Approved === "Yes" || p.RejectStatus === "Yes") && p.privilege_view === true ? <td  >

                                    <ul className="bootstrap-dashboard-action list-inline" >

                                        <li><a className="fa fa-eye dashboardtable-view-button" title="View" data-toggle="modal" data-target="#myModal" data-rid={p.RID} id="ViewButton" onClick={this.ViewFunct}></a></li>
                                    </ul>
                                </td> : null
                            }
                            {
                                p.Approved !== "Yes" && p.RejectStatus !== "Yes" && p.privilege_view === true ?
                                    <td  >
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-eye dashboardtable-view-button" title="View" data-toggle="modal" data-target="#myModal" data-rid={p.RID} id="ViewButton" onClick={this.ViewFunct}></a></li>
                                        </ul>
                                    </td> :null
                            }

                            {
                                p.Approved !== "Yes" && p.RejectStatus !== "Yes" && p.privilege_edit === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-pencil dashboardtable-edit-button" title="Edit" data-iid={p.IID} data-rid={p.RID} id="EditButton" onClick={this.EditFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }
                            {
                                p.Approved !== "Yes" && p.RejectStatus !== "Yes" && p.privilege_delete === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-trash dashboardtable-delete-button" title="Delete" data-rid={p.RID} id="DeleteButton" onClick={this.DeleteFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }

                        </tr>

                    );
                });
                break;

            case 'NotReadOnlyWithDeleteOnly':
                TableData = currentTodos.map((p, index) => {

                    return (
                        <tr>
                            {
                                Object.keys(p).map(k => {
                                    if (k !== "RID" && k !== "privilege_view" && k !== "privilege_edit" && k !== "privilege_delete" && k !== "privilege_insert") {
                                        return (<td className="grey1" key={k}><div value={k}>{p[k]}</div></td>);
                                    }
                                })}
                            {
                                PriorityCol === true ?
                                    <div>
                                        <td>
                                            <ul className="bootstrap-dashboard-action list-inline" >
                                                <li><a className="fa fa-angle-double-up" title="Priority Up" data-rid={p.RID} id="PriorityUpButton" onClick={this.PriorityUPFunct}></a></li>
                                                <li><a className="fa fa-angle-double-down" title="Priority Down" data-rid={p.RID} id="PriorityDownButton" onClick={this.PriorityDownFunct}></a></li>
                                            </ul>
                                        </td>
                                    </div>

                                    : null

                            }
                            {
                                p.privilege_delete === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-trash dashboardtable-delete-button" title="Delete" data-rid={p.RID} id="DeleteButton" onClick={this.DeleteFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }

                        </tr>

                    );
                });
                break;
            case 'NotReadOnlyWithTwoLink':
                TableData = currentTodos.map((p, index) => {
                    return (
                        <tr>
                            {
                                Object.keys(p).map(k => {
                                    if (k !== "RID" && k !== "privilege_view" && k !== "privilege_edit" && k !== "privilege_delete" && k !== "privilege_insert" && k !== "LinkName1" && k !== "LinkName2") {
                                        return (<td className="grey1" key={k}>
                                            <div value={k}>{p[k]}</div>
                                        </td>);
                                    }
                                })}
                            {
                                PriorityCol === true ?
                                    <div>
                                        <td>
                                            <ul className="bootstrap-dashboard-action list-inline" >
                                                <li><a className="fa fa-angle-double-up" title="Priority Up" data-rid={p.RID} id="PriorityUpButton" onClick={this.PriorityUPFunct}></a></li>
                                                <li><a className="fa fa-angle-double-down" title="Priority Down" data-rid={p.RID} id="PriorityDownButton" onClick={this.PriorityDownFunct}></a></li>
                                            </ul>
                                        </td>
                                    </div>

                                    : null

                            }

                            {
                                p.privilege_view === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-eye dashboardtable-view-button" title="View" data-toggle="modal" data-target="#myModal" data-rid={p.RID} id="ViewButton" onClick={this.ViewFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }
                            {
                                p.privilege_edit === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-pencil dashboardtable-edit-button" title="Edit" data-iid={p.IID} data-rid={p.RID} id="EditButton" onClick={this.EditFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }
                            {
                                p.privilege_delete === true ?
                                    <td>
                                        <ul className="bootstrap-dashboard-action list-inline" >
                                            <li><a className="fa fa-trash dashboardtable-delete-button" title="Delete" data-rid={p.RID} id="DeleteButton" onClick={this.DeleteFunct}></a></li>
                                        </ul>
                                    </td>
                                    : null
                            }

                            <td >
                                <ul className="bootstrap-dashboard-action list-inline" >
                                    <li>
                                        <a className='btn-link btnEdit btn' data-rid={p.RID} id={p.Interface_Name} onClick={this.NewLinkFunct1}>{p.LinkName1}
                                        </a>
                                    </li>

                                    <li>
                                        <a className='btn-link btnEdit btn' data-rid={p.RID} id={p.Interface_Name} onClick={this.NewLinkFunct2}>{p.LinkName2}
                                        </a>
                                    </li>
                                </ul>
                            </td>

                        </tr>

                    );

                });
                break;
        }


        var dataColumns = this.state.data.columnNames;

        var tableHeaders = "";
        switch (colCase) {
            case 'NotReadOnlyWithPrivilegeNewLink':
                tableHeaders =
                    (
                        <thead>
                            <tr >
                                {this.state.columnNames.map(function (column) {
                                    if (column !== "RID" && column !== "privilege_view" && column !== "privilege_edit" && column !== "privilege_delete" && column !== "privilege_insert" && column !== "privilege_authorise") {
                                        var res = column.split('__');
                                        return <th > {res[0].replace("_", " ")}</th>;
                                    }
                                })}
                                {
                                    PriorityCol === true ? <th>Priority</th>
                                        : null
                                }
                                <th colSpan="4">Action</th>

                            </tr>
                        </thead>
                    );
                break;
            case 'ReadOnly':
                tableHeaders =
                    (
                        <thead>
                            <tr>
                                {this.state.columnNames.map(function (column) {
                                if (column !== "RID" && column !== "privilege_view" && column !== "privilege_edit" && column !== "privilege_delete" && column !== "privilege_insert") {
                                        var res = column.split('__');
                                        return <th > {res[0].replace("_", " ")}</th>;
                                    }
                                })}

                            </tr>
                        </thead>);
                break;

            case 'NotReadOnly':
                tableHeaders =
                    (
                        <thead >
                            <tr >
                                {this.state.columnNames.map(function (column) {
                                if (column !== "RID" && column !== "privilege_view" && column !== "privilege_edit" && column !== "privilege_delete" && column !== "privilege_insert") {
                                        var res = column.split('__');
                                        return <th > {res[0].replace("_", " ")}</th>;
                                    }
                                })}

                                {
                                PriorityCol === true ? <th>Priority</th>
                                    : null
                                }

                            <th colSpan="3" >Action</th>
                            </tr>
                        </thead>);
                break;
            case 'NotReadOnlyWithNewLink':
                tableHeaders =
                    (
                        <thead>
                            <tr >
                                {this.state.columnNames.map(function (column) {
                                if (column !== "RID" && column !== "privilege_view" && column !== "privilege_edit" && column !== "privilege_delete" && column !== "privilege_insert") {
                                        var res = column.split('__');
                                        return <th > {res[0].replace("_", " ")}</th>;
                                    }
                                })}
                                {
                                PriorityCol === true ? <th>Priority</th>
                                    : null
                                }
                            <th colSpan="4">Action</th>
                           
                            </tr>
                        </thead>
                    );
                break;

            case 'NotReadOnlyWithotDelete':
                tableHeaders =
                    (
                        <thead >
                            <tr >
                                {this.state.columnNames.map(function (column) {
                                    if (column !== "RID" && column !== "RIP" && column !== "privilege_view" && column !== "privilege_edit" && column !== "privilege_delete" && column !== "privilege_insert" && column !== "IID") {
                                        var res = column.split('__');
                                        return <th > {res[0].replace("_", " ")}</th>;
                                    }
                                })}
                                {
                                    PriorityCol === true ? <th>Priority</th>
                                        : null
                                }
                                <th colSpan="3" >Action</th>
                            </tr>
                        </thead>
                    );
                break;

            case 'NotReadOnlyWithoutEdit':
                tableHeaders =
                    (
                        <thead >
                            <tr >
                                {this.state.columnNames.map(function (column) {
                                if (column !== "RID" && column !== "privilege_view" && column !== "privilege_edit" && column !== "privilege_delete" && column !== "privilege_insert") {
                                        var res = column.split('__');
                                        return <th > {res[0].replace("_", " ")}</th>;
                                    }
                                })}

                            <th colSpan="3" >Action</th>
                            </tr>
                        </thead>
                    );

                break;


            case 'ActionLinkWithCondition':
                tableHeaders =
                    (
                        <thead >
                            <tr >
                                {this.state.columnNames.map(function (column) {
                                if (column !== "RID" && column !== "privilege_view" && column !== "privilege_edit" && column !== "privilege_delete" && column !== "privilege_insert") {
                                        var res = column.split('__');
                                        return <th > {res[0].replace("_", " ")}</th>;
                                    }
                                })}                          

                            <th colSpan="3" >Action</th>
                            
                            </tr>
                        </thead>
                    );
                break;

            case 'ReadViewOnly':
                tableHeaders =
                    (
                        <thead >
                            <tr >
                                {this.state.columnNames.map(function (column) {
                                if (column !== "RID" && column !== "privilege_view" && column !== "privilege_edit" && column !== "privilege_delete" && column !== "privilege_insert") {
                                        var res = column.split('__');
                                        return <th > {res[0].replace("_", " ")}</th>;
                                    }
                            })}
                          
                            <th colSpan="3">Action</th>
                            </tr>
                        </thead>);
                break;

            case 'NotReadOnlyWithDeleteOnly':
                tableHeaders =
                    (
                        <thead >
                            <tr >
                                {this.state.columnNames.map(function (column) {
                                if (column !== "RID" && column !== "privilege_view" && column !== "privilege_edit" && column !== "privilege_delete" && column !== "privilege_insert") {
                                        var res = column.split('__');
                                        return <th > {res[0].replace("_", " ")}</th>;
                                    }
                                })}

                            <th colSpan="3" >Action</th>
                            </tr>
                        </thead>
                    );
                break;

            case 'NotReadOnlyWithTwoLink':
                tableHeaders =
                    (
                        <thead >
                            <tr >
                                {this.state.columnNames.map(function (column) {
                                if (column !== "RID" && column !== "privilege_view" && column !== "privilege_edit" && column !== "privilege_delete" && column !== "privilege_insert" && column !== "LinkName1" && column !== "LinkName2") {
                                        var res = column.split('__');
                                        return <th > {res[0].replace("_", " ")}</th>;
                                    }
                                })}
                                {
                                PriorityCol === true ? <th>Priority</th>
                                    : null
                                }
                            <th colSpan="4" >Action</th>
                            </tr>
                        </thead>
                    );
                break;
        }

        return (

            <div className="col-sm-12 dashboard-table-container">
                {
                    colCase === 'NotReadOnly' && InsertPriv === 'True' ?
                        <div className="icon-right"><a href={this.state.addURL} className="addnew-button-container" ><i className="fa fa-plus" title="Create" ></i></a></div>
                        : null
                }
                {
                    colCase === 'NotReadOnlyWithNewLink' && InsertPriv === 'True' ?
                        <div className="icon-right"><a href={this.state.addURL} className="addnew-button-container" ><i className="fa fa-plus" title="Create" ></i></a></div>
                        : null
                }

                {
                    colCase === 'NotReadOnlyWithotDelete' && InsertPriv === 'True' ?
                        <div className="icon-right"><a href={this.state.addURL} className="addnew-button-container" ><i className="fa fa-plus" title="Create" ></i></a></div>
                        : null
                }
                 {
                    colCase === 'NotReadOnlyWithoutEdit' && InsertPriv === 'True' ?
                        <div className="icon-right"><a href={this.state.addURL} className="addnew-button-container" ><i className="fa fa-plus" title="Create" ></i></a></div>
                        : null
                }

                {
                    colCase === 'ActionLinkWithCondition' && InsertPriv === 'True' ?
                        <div className="icon-right"><a href={this.state.addURL} className="addnew-button-container" ><i className="fa fa-plus" title="Create" ></i></a></div>
                        : null
                }

                {
                    colCase === 'NotReadOnlyWithTwoLink' && InsertPriv === 'True' ?
                        <div className="icon-right"><a href={this.state.addURL} className="addnew-button-container" ><i className="fa fa-plus" title="Create" ></i></a></div>
                        : null
                }
               
                <div className="modal fade userdetails-viewmodal-container" id="myModal">
                    <div className="modal-dialog modal-lg">
                        <div className="modal-content">


                            <div className="modal-header">
                                <button type="button" className="close" data-dismiss="modal">&times;</button>
                                <h4 className="modal-title">{ViewHead}</h4>

                            </div>


                            <div className="modal-body">


                                {
                                    this.state.noData === 1 ?
                                        <div className="row model-box-border">
                                            <div className="col-sm-3">
                                                {

                                                    FirstNames

                                                }

                                            </div>
                                            <div className="col-sm-3">
                                                {

                                                    FirstData

                                                }

                                            </div>
                                            <div className="col-sm-3">
                                                {

                                                    SecondNames

                                                }

                                            </div>
                                            <div className="col-sm-3">
                                                {

                                                    SecondData

                                                }

                                            </div>
                                        </div>
                                        : <div className="row model-box-border"><h3 className="text-center">No Data Found</h3> </div>
                                }

                            </div>


                        </div>
                    </div>
                </div>


                <div className="panel table-container-section">

                    {
                        GridColCase === true ?
                            <div className="panel-heading">
                                <h3 className="panel-title">{this.state.gridHead}</h3>
                                <div className="pull-right dashboard-right-panel">
                                    <ul className="list-inline">
                                        <li className="col-sm-6">
                                            <a href="#" className="search-button-container" ><i className="fa fa-search" title="Search"></i></a>
                                        </li>
                                        <li className="col-sm-6">
                                           
                                                <button type="button" className="btn btn-default submit-button-container btnBack" data-url={MainGridUrl} onClick={this.handelBack}>Back</button>
                                            
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            : <div className="panel-heading">
                                <h3 className="panel-title">{this.state.gridHead}</h3>
                                <div className="pull-right dashboard-right-panel">
                                    <ul className="list-inline">
                                        <li>
                                            <a href="#" className="search-button-container" ><i className="fa fa-search" title="Search"></i></a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                    }
                    





                    <div className="panel-body administration-table-panelbody" >
                        <div className="row" >
                            <div className="dashboard-searchpaging-container col-sm-12" >
                                <div className="col-sm-offset-8 col-sm-4" ><input type="text" className="form-control" placeholder="Search.." ref={input => this.search = input}
                                    onChange={this.handleInputChange} /></div>
                                <div className="col-sm-2 hidden"><select className="form-control" ref={input => this.size = input} onChange={this.handleSizeChange}>
                                    <option value="5">5</option>
                                    <option value="10" selected="selected" >10</option>
                                    <option value="20">20</option>
                                    <option value="30">30</option>
                                    <option value="40">40</option>
                                    <option value="50">50</option>
                                </select></div>
                            </div>
                        </div>
                        <div className="table-responsive">
                            <table className="table table-striped MainTable" width="100%">
                                
                            {tableHeaders}
                                    
                            <tbody>
                                {TableData}

                            </tbody>

                            </table>
                        </div>
                        <nav aria-label="Countries Pagination" >
                            <div className="row">
                                <div className="col-sm-12 totalrecord-pagination-container">
                                    <div className="col-sm-4 total-records-container">
                                        <p style={count}>Total Records : {totalRecords}</p>
                                    </div>

                                    <div className="col-sm-8 pagination-number-container" style={paginationRow}>
                                        <ul className="pagination" style={Pagination}>

                                            {pages.map((page, index) => {

                                                if (page === LEFT_PAGE) return (
                                                    <li key={index} className="page-item">
                                                        <a className="page-link" href="#" aria-label="Previous" onClick={this.handleMoveLeft}>
                                                            <span aria-hidden="true">&laquo;</span>
                                                            <span className="sr-only">Previous</span>
                                                        </a>
                                                    </li>
                                                );

                                                if (page === RIGHT_PAGE) return (
                                                    <li key={index} className="page-item">
                                                        <a className="page-link" href="#" aria-label="Next" onClick={this.handleMoveRight}>
                                                            <span aria-hidden="true">&raquo;</span>
                                                            <span className="sr-only">Next</span>
                                                        </a>
                                                    </li>
                                                );

                                                return (
                                                    <li key={index} className={`page-item${currentPage === page ? ' active' : ''}`}>
                                                        <a className="page-link" href="#" onClick={this.handleClick(page)}>{page}</a>
                                                    </li>
                                                );

                                            })}

                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div >
                </div>
                <div id='loader' style={hidden} className="loader-img-container">
                    <div className="loader-img"><img src='../image/giphy.gif' width='70px' height='70px' alt="Loader" /></div>
                </div>
            </div>




        );


    }
}

ReactDOM.render(<App />, document.getElementById(GridDivID));
